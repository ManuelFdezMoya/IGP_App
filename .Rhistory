shiny::runApp()
library(ggplot2)
library(plotly)
library(ggmap)
library(dplyr)
library(maps)
library(tidyr)
setwd("~/Documents/IGP/")
rm(list=ls())
getwd()
library(ggplot2)
packrat::off()
library(ggplot2)
packrat::on()
#
library(ggplot2)
library(plotly)
packrat::off()
library(plotly)
library(ggmap)
library(dplyr)
library(maps)
library(tidyr)
setwd("~/Documents/IGP/")
rm(list=ls())
load("D_Impianti_A.Rdat")
load("D_Prezzo_A.Rdat")
source("Funciones_auxiliares.R")
View(D_Impianti_A)
table(D_Impianti_A$Provincia)
# Homogeneización del texto de descripción del carburante ----------------------
D_Prezzo_A$carburante <- TEXTO_CARBURANTE(D_Prezzo_A$descCarburante)
levels(D_Prezzo_A$isSelf) <- c("Served", "Self_Service")
table(D_Prezzo_A$isSelf)
# Hay información duplicada (sólo varía en la hora de la comunicación)  --------
# Eliminamos posibles duplicados según ...
# idImpianto carburante dtComu isSelf
TEMP <- select(D_Prezzo_A, idImpianto, carburante, dtComu, isSelf)
DUPS <- duplicated(TEMP)
D_Prezzo_A2 <- D_Prezzo_A[!DUPS, ]
table(D_Impianti_A$Provincia)
names(table(D_Impianti_A$Provincia))
D_I_Provincias <- names(table(D_Impianti_A$Provincia))
read.csv("/Users/mfm/Documents/IGP/Datos_bruto/D_Provincias.csv")
read.csv2("/Users/mfm/Documents/IGP/Datos_bruto/D_Provincias.csv")
D_Provincias <- read.csv2("/Users/mfm/Documents/IGP/Datos_bruto/D_Provincias.csv")
View(D_Provincias)
table(D_Provincias$Province)
table(D_Provincias$ISO)
D_ISOP_Imp <- names(table(D_Impianti_A$Provincia))
names(table(D_Provincias$ISO))
setdiff( names(table(D_Provincias$ISO)) , names(table(D_Impianti_A$Provincia)))
nombres_of <- names(table(D_Provincias$ISO))
(nombres_of <- names(table(D_Provincias$ISO)))
(nombre_datos <- names(table(D_Impianti_A$Provincia)))
nombres_of
gsub(pattern = " ", x = nombres_of, replacement = "")
D_Provincias$ISO <- gsub(pattern = " ", x = D_Provincias$ISO , replacement = "")
(nombres_of <- names(table(D_Provincias$ISO)))
(nombre_datos <- names(table(D_Impianti_A$Provincia)))
setdiff(nombres_of  , nombre_datos)
setdiff(nombre_datos, nombres_of )
View(D_Provincias)
View(D_Impianti_A)
str(D_Impianti_A$Provincia)
str(D_Provincias$ISO)
table(D_Impianti_A$Provincia))
table(D_Impianti_A$Provincia)
table(D_Impianti_A$Provincia, useNA = "always")
D_Impianti_A$Provincia
is.na(D_Impianti_A$Provincia )
table(is.na(D_Impianti_A$Provincia ))
is.na(D_Impianti_A$Provincia ) <- "NAP"
D_Impianti_A$Provincia[is.na(D_Impianti_A$Provincia )] <- "NAP"
table(D_Impianti_A$Provincia, useNA = "always")
setwd("~/Documents/IGP/")
rm(list=ls())
load("D_Impianti_A.Rdat")
load("D_Prezzo_A.Rdat")
source("Funciones_auxiliares.R")
D_Provincias <- read.csv2("/Users/mfm/Documents/IGP/Datos_bruto/D_Provincias.csv")
D_Provincias$ISO <- gsub(pattern = " ", x = D_Provincias$ISO , replacement = "")
(nombres_of <- names(table(D_Provincias$ISO)))
(nombre_datos <- names(table(D_Impianti_A$Provincia)))
setdiff(nombre_datos, nombres_of )
str(D_Impianti_A$Provincia)
str(D_Provincias$ISO)
setdiff(nombres_of, nombre_datos  )
D_Impianti_A$Provincia[is.na(D_Impianti_A$Provincia )] <- "NA"
(nombres_of <- names(table(D_Provincias$ISO)))
(nombre_datos <- names(table(D_Impianti_A$Provincia)))
setdiff(nombres_of, nombre_datos  )
table(D_Provincias$Region)
names(table(D_Provincias$Region))
D_Provincias$Region <- gsub(pattern = " ", x = D_Provincias$Region , replacement = "")
names(table(D_Provincias$Region))
D_Provincias <- read.csv2("/Users/mfm/Documents/IGP/Datos_bruto/D_Provincias.csv")
D_Provincias$ISO <- gsub(pattern = " ", x = D_Provincias$ISO , replacement = "")
D_Provincias$Region <- gsub(pattern = "[[:space:]]*$", x = D_Provincias$Region , replacement = "")
names(table(D_Provincias$Region))
regiones <- names(table(D_Provincias$Region))
regiones <- regiones[2:21]
regiones
write.csv2(regiones, file = "regiones.csv")
shiny::runApp('IGP_App')
runApp('IGP_App')
runApp('IGP_App')
TEMP <- list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3)
runApp('IGP_App')
TEMP <- regiones
shinyUI(fluidPage(
# Application title
titlePanel("Seleccionar provincias de una región"),
# Seleccionar región
selectInput("Regiones", label = h3("Selecciona la región"),
choices = TEMP
, selected = 1)
))
runApp('IGP_App')
save(regiones, "regiones.Rdat")
getwd()
save(regiones, file = "regiones.Rdat")
